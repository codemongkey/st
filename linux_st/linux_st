但如果源文件太多，一个一个编译时就会特别麻烦，于是人们想到，为什么不设计一种类似批处理的程序，来批处理编译源文件呢，于是就有了make工具，它是一个自动化编译工具，你可以使用一条命令实现完全编译。但是你需要编写一个规则文件，make依据它来批处理编译，这个文件就是makefile，所以编写makefile文件也是一个程序员所必备的技能。

对于一个大工程，编写makefile实在是件复杂的事，于是人们又想，为什么不设计一个工具，读入所有源文件之后，自动生成makefile呢，于是就出现了cmake工具，它能够输出各种各样的makefile或者project文件,从而帮助程序员减轻负担。但是随之而来也就是编写cmakelist文件，它是cmake所依据的规则。所以在编程的世界里没有捷径可走，还是要脚踏实地的。
快速查看某个进程pid：
pgrep -l srs



用法1：
1、ls指令 -lha 路径
含义 ：list 列出当前工作目录下所有的文件/文件夹的名称
用法2：
路径：
相对、绝对路径
相对：有个参照物 ./表示当前目录 ../上一级目录
绝对：从根"/"开始寻找

用法3： 选项 路径
-l: 详细列表的形式打开 第一列表示文档的类型  以'-'开头是文件 以'd'开头是文件夹 用户和用户组
-a: 显示隐藏文件 以'.'开头的

用法4:： ls -lh 路径 以可读性较高的形式显示大小 目录的大小就是4k 即使里面的额东西放多了

颜色结果说明 :
蓝色;文件夹 
黑色:文件
绿色:拥有所有权限
    
pwd指令 print working directory
cd指令 切换当前的工作目录的 ../../
'~'在Linux中有一个特殊的符号‘～’ ，表示当前用户的家目录 cd ~

mkdir (make directory) 可以加路径
mkdir -p 路径 循环创建目录 如果路径中没有目录会创建目录

mkdir 路径1 路径2 。。。


创文件 touch指令
作用：创建文件

cp指令 copy

cp 被复制的文档路径 文档被复制的路径 可以修改名字 cp spdlog.cpp ../spdlog2.cpp
当使用cp命令复制目录时需要添加 -r选项 recursion

mv指令
作用:移动文档到新的位置 移动之后原始文件不在了
mv 两个路径(不用加-r)
重命名也是mv

rm指令 remove
rm 选项 路径 可以同时删除多个
选项： 
   -f 强制删除 force
   -r
大名鼎鼎的 rm -rf

要删除一个目录下有公共特性的文档，例如都以Linux开头 (用正则表达式匹配 Linux*,表示文件只要以Linux开头，后续不用管)

vim指令 （一款文本编辑器）

退出打开的文件：在没有按下其他命令的时候，按下shift+英文冒号,输入q,按下回车即可

输出重定向
一般的命令的输出都会显示在终端中，若想保存到文件中，则需重定向


>:覆盖掉原先的数据
>>:追加输出，在原始末尾追加

ls -la > ls.txt
文件可以不存在，会新建

cat指令
1:直接打开一个文件的作用
2:和输出重定向配合使用 对文件进行合并 cat  路径1 路径2 。。。 文件路径n > 合并之后的路径 不会删除原先的文件

df指令:查看磁盘空间
df -h
tmpfs 是一个不存在于实体硬盘上、而是驻在记忆里的特殊文件系统。其中一个副作用就是当你失去电源（或重就开机）时，tmpfs 上的一切内容都会消失。tmpfs 驻守在内存里，它的速度极快。它的寻觅时间与驻守在硬盘上的一般文件系统根本不能相比。
free指令
查看内存使用情况       -m,以M为单位。
真实内存为free+buffer+cache
swap:当内存不够使用，允许硬盘充当内存

head指令:查看一个文件的前n行，若不指定n，则默认显示前10行。
语法：head -n 路径
tail:查看一个文件的末尾n行
tail -f 路径:    查看一个系统日志的动态变化，不能是用户手动追加的 可以是输出重定向添加的

less指令：查看文件，以较少的内容进行输出,通过辅助键（数字+回车、空格键+上下键）翻阅

wc指令：统计文件内容信息
    -l:lines
    -w:words 依照空格判断
    -c:bytes,字节数
===============================================

date指令（重点）
作用：表示操作时间日期（读取、设置），shell


语法1:date:    CST:当地时间 2019年 04月 25日 星期四 14:14:24 CST

语法2：date +%F（等于date "+%Y-%m-%d"） 2019-04-25

语法3：date "+%F %T" 引号表示让两者成为一个整体

语法4：获取之前或之后的时间（备份（超过某天就删除））
date -d "-1day" "+%F %T" 
%F:完整的年月日
%T:完整的时分秒
%Y:4位年份
%m:带前导0
%d:
%H:
%M:
%S:秒

cal指令：
#cal 直接输出当前月份的月历
#cal -3表示上一个+本月+下一个月的日历
#cal -y
#cal -s(-m(周一开始))


clear/ctrl +l
清除已经存在的命令和结果(没有真正意义上的清除)(windows下cls)

=============================
管道（重要）
管道符：|
作用：一般可以用于过滤，特殊，扩展处理,等辅助作用
语法：不能单独使用
ls / |grep y
1:以管道作为分界线，前面的命令有个输出，后面需要有个输入，然后在过滤，最后在输出

2:grep指令：主要用于过滤
管道符不是：中文字符丨（gun）

特殊用法：通过管道实现less的等价效果 cat ls.txt|less

扩展处理: ls |wc -l统计有多少个文件

hostname:
操作设置服务器的主机名
hostname 
hostname -f 输出当前主机名中的FQDN 全限定域名

id指令
(用户ID,用户组ID) 默认当前用户
#id
验证用户信息：通过 /etc/passwd
验证用户组信息：通过 /etc/group

whoami:
显示当前登录的用户名，一般用于shell脚本,日志


ps -ef
ps:查看服务器的进程信息
选项：-e  等价于“-A” 列出全部的进程
     -f  列出所有的信息，显示全字段
uid pid ppid 
如果一个程序没有父级pid那么就是僵尸进程
c:cpu占用率
stime:starttime
TTY:终端设备 发起该进程的设备识别符号?表示进程不是有终端发起的
TIME:进程的执行时间
CMD:该进程的名称或对应的路径
肯定使用的：ps -ef|grep 名称


top指令

作用:查看服务器进程占用的资源

zombies僵尸
plants vs zombines

pr:priority优先级
ni:nice
virt:虚拟内存: 申请500 使用320 实际占用500  
res: 常驻内存  申请500 使用320 实际占用320
shr:共享内存   申请500 使用320 扣除被其他进程的调用开销
计算一个进程实际使用的内存 = 常驻内存 - 共享内存 
time+：执行时间
===s:表示进程的状态 sleeping s表睡眠 r表运行
===%cpu
===%mem
===command:进程名称或路径
快捷键
M:按内存
p；按cpu从高到低降序
1：显示所有CPU

Ctrl + a - 跳转到行的开头
Ctrl + c - 终止命令
Ctrl d - 从光标下删除
Ctrl + e - 跳转到行的末尾
Ctrl + k - 删除到 EOL
Ctrl + l - 清除屏幕
Ctrl + u - 删除光标前面的
Ctrl + x x - 在当前光标位置之间移动
Ctrl + x @ - 显示可能的主机名完成
Ctrl + z - 暂停/停止命令
du(disk usage) -sh 路径:查看目录的真实大小
    -s(summaries):只显示汇总的大小
    -h():可读性

find指令
#find 路径范围 选项 选项的值
   -name:（支持模糊搜索）
   -type: 按照文件类型搜索
	文档类型	 ‘-’文件('f') ，‘d'文件夹

find /etc/ -name *.conf |wc -l


service指令（重点）
用于控制一些软件的服务启动/停止/重启
Apache（网站服务器软件）

kill 
killall 进程名称
kill  -9 pid


ifconfig 获取网卡信息

reboot -w  模拟重启,往系统里写开关机日志
shutdown 关机 慎用 别关了远程服务器 
shutdown -h now(15:25) "关机提示"

poweroff
hail
init D



uptime
计算计算机的持续时间

netstat -tnlp
查看网络的链接状态
-t:只列出tcp协议
-n:将地址转化成IP地址，将协议转化成端口号
-l:过滤出状态为listen的连接
-p:显示发起连接的进程pid和名称


man:manual,手册

如何在命令行中快速删除光标前/后的内容。 ctrl+u ctrl+k

如何删除/tmp下的所有A开头的文件 rm -f /tmp/A*

cp /etc/passwd /tmp/
tail  -3 /etc/passwd

wc -l /etc/passwd

head -3 /etc/pwd

mkdir -p /text/1/2/3/4

cd ~ 或直接cd

du -sh /etc 磁盘空间

删除/tmp下所有的文件
rm -rf /tmp/*



vim三种模式（大众的认知） 命令、编辑、末行

命令：不能对文件直接编辑，可以输入快捷键进行一些操作（删除行，复制行，移动光标。粘贴等等）【默认进入的模式】
编辑模式：在该模式下可以对文件内容践行编辑
末行模式：可以在末行中输入命令来对文件进行操作（保存、替换、退出、搜索、撤销、高亮）

打开的方式：
一：vim 路径 打开指定的文件
二：vim +数字 文件的路径  打开文件并且将光标移动到指定行
三：vim +/关键词 文件的路径 作用： 打开指定的文件，并且高亮显示关键词
四：vim + 路径1 路径2 路径3  作用：同时打开多个文件

命令模式：
光标移动：行首 shift +6或^(不是小键盘上的)
        行尾 shift +4或$
正则表达式 *^$
        首行 gg(good game)
	末行 G
	相上翻屏  :ctrl +b(before) 或pgup
        向下翻屏  ：ctrl +f(after) 


复制操作
1:复制光标所在行 yy
   粘贴  p
2: 以光标所在行为准向下复制多行 数字 yy

3: 可视化复制
ctrl+v 然后按下↑↓←→进行选择 按下yy 复制 p粘贴 



3、剪切/删除
dd下一行上移
注意：严格说dd是剪切

数字+dd包含当前行

D删除后下一行不上移当前行为空白

4、撤销/恢复
u(undo) 
ctrl+r(restor) 
ctrl+z、ctrl+y



光标的快速移动
移动到指定行：数字+G 
以当前行为准：数字+↑/↓/←/→
末行模式下  :数字 回车


命令模式→末行模式，按下：或/（查找）
退出：删除所有字符，按一下或两下esc


保存：
“:w”
":w 路径"

退出
:q
:q!

保存并退出
:wq
:x X(用于加密)
若文件没有被修改，使用wq会更新修改时间，而x不会
强制
:q!

调用外部命令
:!命令

搜索
“/关键词” N/n

no hl
set hlsearch

替换
:s/搜索的关键词/新的内容 替换光标所在行的第一处符合条件的
:s/搜索的关键词/新的内容/g  替换光标所在行的全部符合条件的
:%s/搜索的关键词/新的内容 替换文档所有行的第一处符合条件的
:%s/搜索的关键词/新的内容/g 替换文档所有符合条件的



%表示整个文件
g表示全局global


显示行号:
:set nu (number)


查看当前打开文件名称： ：files 
%a active
#上一个打开的文件


切换文件 ：
open  name
通过其他命令切换上一个或者下一个文件
:bn back to next
:bp back to previous



命令模式→编辑模式
i:在光标所在字符前 insert
a:在光标所在字符后 after



代码着色
:syntax on/off

vim中计算器的使用

a:编辑模式
b:ctrl +r ,输入= 
c:输入需要计算的内容

别名映射文件 ～/.bashrc

运行级别 init

/etc/passwd 存储用户的关键信息
用户名:密码:用户ID:用户主组ID:注释:家目录:解释器 shell(等待用户进入系统之后，用户输入指令之后，该解释器收集指令，传递给内核)
/etc/group  存储用户组的关键信息
/etc/shadow 存储用户的密码信息

在不添加选项执行操作:
  创建家目录
  创建用户组

useradd 选项 用户名
-g:  指定用户的用户主组 id 或组名
-G:  指定用户的附加用户组
-u:  uid,用户标识符
-c: 注释

查看用户主组，passwd
查看用户附加组 group

usermod 选项 用户
user modify
-i:修改用户名


linux不允许没有设置密码的用户登录
sudo passwd 用户

切换用户 su(不指定切换到root)

切换注意事项：
  a.从root往普通用户切换不需要密码
  b.切换后工作目录不变
  c.普通用户没办法访问root用户家目录 反之可以

userdel 
-r删除家目录

除了passwd都要超级管理员权限

用户组名：密码：用户组ID:组内用户名
一般不设置密码
组内用户名：附加组是该组的用户

groupadd 选项 用户组名

-g:id

groupmod
-g
-n:用户修改的-l，更改用户组名称

groupdel 

网卡配置文件

ssh secure shell 远程链接

端口默认是22 0-65535(2的16次)(防火墙)

终端工具：Xshell、Putty



















